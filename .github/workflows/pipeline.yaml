name: Pipeline

on:
  push:
    branches:
      - develop
      - feat/*
      - hotfix/*
      - main
  pull_request:
    branches:
      - develop
      - feat/*
      - hotfix/*
      - main

env:
  CONTAINER_NAME: ${{ github.repository }}
  CONTAINER_REGISTRY_GHCR: ghcr.io
  CONTAINER_PLATFORMS: linux/amd64,linux/arm64/v8
  # https://github.com/docker/buildx/releases
  BUILDX_VERSION: 0.17.1

jobs:
  init:
    name: Init
    runs-on: ubuntu-24.04
    outputs:
      VERSION: ${{ steps.version.outputs.version }}
      VERSION_FULL: ${{ steps.version.outputs.version_full }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          # We need all Git history for "version.sh"
          fetch-depth: 0
          # Ensure "version.sh" submodule are up-to-date
          submodules: recursive

      - name: Generate versions
        id: version
        run: |
          echo "version=$(bash cicd/version/version.sh -g . -c)" >> $GITHUB_OUTPUT
          echo "version_full=$(bash cicd/version/version.sh -g . -c -m)" >> $GITHUB_OUTPUT

  test:
    name: Test
    permissions:
      id-token: write
    runs-on: ubuntu-24.04
    needs:
      - init
    strategy:
      fail-fast: false
      matrix:
        # Run all test suites
        step:
          - static
          - unit
        # Run on all supported Python versions
        python-version:
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.1.1
        with:
          cache: pip
          python-version: "3.13"

      - name: Login to Azure
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Cache pytest
        uses: actions/cache@v4.0.2
        with:
          key: pytest-${{ github.head_ref || github.ref_name }}-${{ hashFiles('requirements-dev.txt') }}
          path: .pytest_cache

      - name: Cache Ruff
        uses: actions/cache@v4.0.2
        with:
          key: ruff-${{ github.head_ref || github.ref_name }}-${{ hashFiles('requirements-dev.txt') }}
          path: .ruff_cache

      - name: Set up dependencies
        run: make install-deps

      # See: https://github.com/ungoogled-software/ungoogled-chromium/issues/2804#issuecomment-2081611387
      - name: Configure AppArmor profile
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - name: Configure environment variables
        run: echo "${{ secrets.DOTENV_UNIT_TESTS }}" > .env

      - name: Run tests
        run: make test-${{ matrix.step }} version_full=${{ needs.init.outputs.VERSION_FULL }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.6
        if: always()
        with:
          compression-level: 9
          name: test-${{ matrix.step }}-${{ matrix.python-version }}
          path: test-reports/*

  build-wheels:
    name: Build wheels
    runs-on: ubuntu-24.04
    needs:
      - init
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Set up Python
        uses: actions/setup-python@v5.1.1
        with:
          cache: pip
          python-version: "3.13"

      - name: Set up build dependencies
        run: |
          python3 -m pip install --upgrade pip build

      - name: Write version
        run: |
          version=$(echo "${{ needs.init.outputs.VERSION }}" | sed 's/-/\.a/' | cut -d'.' -f1-4)
          echo '__version__ = "'${version}'"' > src/scrape_it_now/__init__.py

      - name: Build wheels
        run: |
          make build-wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.6
        with:
          compression-level: 9
          name: wheels
          path: dist/*.whl

  attest-binaries:
    name: Attest binaries
    permissions:
      attestations: write
      id-token: write
    runs-on: ubuntu-24.04
    needs:
      - build-wheels
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          merge-multiple: true
          path: dist
          pattern: wheels

      - name: Generate attestations
        uses: actions/attest-build-provenance@v1.4.4
        with:
          subject-path: dist/*

  attest-dependencies:
    name: Attest dependencies
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Run attestation
        uses: advanced-security/component-detection-dependency-submission-action@v0.0.2
        with:
          directoryExclusionList: docs

  attest-sbom:
    name: Attest SBOM
    permissions:
      attestations: write
      id-token: write
    runs-on: ubuntu-24.04
    needs:
      - build-wheels
      - init
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          merge-multiple: true
          path: dist
          pattern: wheels

      - name: Set up Syft
        uses: anchore/sbom-action/download-syft@v0.16.1

      - name: Run scan
        run: make sbom version_full=${{ needs.init.outputs.VERSION_FULL }}

      - name: Generate attestations
        uses: actions/attest-build-provenance@v1.4.4
        with:
          subject-path: sbom-reports/*

      - name: Upload results to release
        uses: actions/upload-artifact@v4.3.6
        with:
          compression-level: 9
          name: sbom
          path: sbom-reports/*

  build-image:
    name: Build & publish image
    needs:
      - init
    runs-on: ubuntu-24.04
    permissions:
      attestations: write
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3.0.0
        with:
          platforms: ${{ env.CONTAINER_PLATFORMS }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
        with:
          version: v${{ env.BUILDX_VERSION }}

      - name: Login to registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.CONTAINER_REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Write version
        run: |
          version=$(echo "${{ needs.init.outputs.VERSION }}" | sed 's/-/\.a/' | cut -d'.' -f1-4)
          echo '__version__ = "'${version}'"' > src/scrape_it_now/__init__.py

      - name: Container meta
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.CONTAINER_REGISTRY_GHCR }}/${{ env.CONTAINER_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}},value=${{ needs.init.outputs.VERSION_FULL }}
            type=sha
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ env.CONTAINER_NAME }}
            org.opencontainers.image.vendor=${{ github.actor }}

      - name: Build/push container
        id: build
        uses: docker/build-push-action@v5.3.0
        with:
          cache-from: type=gha
          cache-to: type=gha
          context: .
          file: cicd/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=registry,oci-mediatypes=true,compression=estargz,compression-level=9,force-compression=true
          platforms: ${{ env.CONTAINER_PLATFORMS }}
          push: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Generate attestations
        uses: actions/attest-build-provenance@v1.4.4
        with:
          push-to-registry: true
          subject-digest: ${{ steps.build.outputs.digest }}
          subject-name: ${{ env.CONTAINER_REGISTRY_GHCR }}/${{ env.CONTAINER_NAME }}

  publish-testpypi:
    name: Publish to TestPyPI
    # The env "testpypi" has a protection rule which requires to be on the "main" or "develop" branches, which are both protected
    environment:
      name: testpypi
      url: https://test.pypi.org/p/scrape-it-now
    permissions:
      id-token: write
    runs-on: ubuntu-24.04
    needs:
      - attest-binaries
      - attest-dependencies
      - attest-sbom
      - test
    if: (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/develop')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          merge-multiple: true
          path: dist
          pattern: wheels

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    name: Publish to PyPI
    # The env "pypi" has a protection rule which requires to be on the "main" branch, which is protected
    environment:
      name: pypi
      url: https://pypi.org/p/scrape-it-now
    permissions:
      id-token: write
    runs-on: ubuntu-24.04
    needs:
      # Always publish first to TestPyPI as a safety precaution
      - publish-testpypi
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          merge-multiple: true
          path: dist
          pattern: wheels

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.2

  publish-release:
    name: Publish release
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    needs:
      - attest-binaries
      - attest-dependencies
      - attest-sbom
      - build-image
      - init
      - test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v4.1.8
        with:
          merge-multiple: true
          path: dist

      - name: Publish
        uses: softprops/action-gh-release@v2.0.8
        with:
          files: dist/*
          generate_release_notes: true
          make_latest: true
          name: scrape-it-now v${{ needs.init.outputs.VERSION }}
          tag_name: v${{ needs.init.outputs.VERSION }}
